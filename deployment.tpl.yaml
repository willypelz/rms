apiVersion: v1
kind: PersistentVolume
metadata:
  name: ${KUBE_META_NAME}-pv
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: efs-sc
  mountOptions:
    - tls
  csi:
    driver: efs.csi.aws.com
    volumeHandle: fs-85085b71:/clients/admin-seamlesstesting
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${KUBE_META_NAME}-claim
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: efs-sc
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${KUBE_META_NAME}
  #namespace: staging
spec:
  selector:
    matchLabels:
      app: ${KUBE_META_NAME}
  replicas: 1
  template:
    metadata:
      labels:
        app: ${KUBE_META_NAME}
    spec:
        containers:
        - name: ${KUBE_META_NAME}
          image: seamlesshr/${KUBE_META_NAME}:HRMS-${BITBUCKET_BUILD_NUMBER}
          env:
          - name: CLIENT_NAME
            value: ${KUBE_META_NAME}
          - name: APACHE_RUN_USER
            value: ec2-user
          - name: APACHE_RUN_GROUP
            value: www-data
          - name: ATATUS_LICENSE_KEY
            value: ${ATATUS_LICENSE_KEY}
          volumeMounts:
          - name:  ${KUBE_META_NAME}-storage
            mountPath:  /var/www/mnt
          resources: 
            limits:
              cpu: 1000m
              memory: 1.8Gi
            requests:
              cpu: 450m
              memory: 900Mi
          ports:
          - containerPort: 80
          imagePullPolicy: Always
        imagePullSecrets:
          - name:  regcred
        volumes:
          - name:  ${KUBE_META_NAME}-storage
            persistentVolumeClaim:
              claimName: ${KUBE_META_NAME}-claim
---
apiVersion: v1
kind: Service
metadata:
  name: ${KUBE_META_NAME}
spec:
  selector:
    app: ${KUBE_META_NAME}
  ports:
    - name: http
      port: 80
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/add-base-url: 'true'
    nginx.ingress.kubernetes.io/ssl-redirect: 'false'
    certmanager.k8s.io/cluster-issuer: letsencrypt
    kubernetes.io/ingress.class: nginx
    kubernetes.io/ingress.allow-http: "false"
    kubernetes.io/ingress.allow-https: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /
  labels:
    app: ${KUBE_META_NAME}
  name: ${KUBE_META_NAME}-ingress
spec:
  rules:
  - host: ${KUBE_META_NAME}.${DEPLOYMENT_SUFFIX}
    http:
      paths:
      - backend:
          serviceName: ${KUBE_META_NAME}
          servicePort: 80
        path: /
  tls:
  - hosts:
    - ${KUBE_META_NAME}.${DEPLOYMENT_SUFFIX}
    secretName: tls-secret
---

apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: ${KUBE_META_NAME}-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ${KUBE_META_NAME}
  minReplicas: ${MIN_REPLICAS}
  maxReplicas: ${MAX_REPLICAS}
  targetCPUUtilizationPercentage: ${HPA_CPU_UTZ}